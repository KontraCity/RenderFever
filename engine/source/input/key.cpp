#include "rf/input/key.hpp"

#include <GLFW/glfw3.h>

namespace rf {
    
const char* Input::KeyName(Key key) {
    switch (key) {
        case Key::F1:
            return "F1";
        case Key::F2:
            return "F2";
        case Key::F3:
            return "F3";
        case Key::F4:
            return "F4";
        case Key::F5:
            return "F5";
        case Key::F6:
            return "F6";
        case Key::F7:
            return "F7";
        case Key::F8:
            return "F8";
        case Key::F9:
            return "F9";
        case Key::F10:
            return "F10";
        case Key::F11:
            return "F11";
        case Key::F12:
            return "F12";
        case Key::F13:
            return "F13";
        case Key::F14:
            return "F14";
        case Key::F15:
            return "F15";
        case Key::F16:
            return "F16";
        case Key::F17:
            return "F17";
        case Key::F18:
            return "F18";
        case Key::F19:
            return "F19";
        case Key::F20:
            return "F20";
        case Key::F21:
            return "F21";
        case Key::F22:
            return "F22";
        case Key::F23:
            return "F23";
        case Key::F24:
            return "F24";
        case Key::F25:
            return "F25";
        case Key::Zero:
            return "0";
        case Key::One:
            return "1";
        case Key::Two:
            return "2";
        case Key::Three:
            return "3";
        case Key::Four:
            return "4";
        case Key::Five:
            return "5";
        case Key::Six:
            return "6";
        case Key::Seven:
            return "7";
        case Key::Eight:
            return "8";
        case Key::Nine:
            return "9";
        case Key::A:
            return "A";
        case Key::B:
            return "B";
        case Key::C:
            return "C";
        case Key::D:
            return "D";
        case Key::E:
            return "E";
        case Key::F:
            return "F";
        case Key::G:
            return "G";
        case Key::H:
            return "H";
        case Key::I:
            return "I";
        case Key::J:
            return "J";
        case Key::K:
            return "K";
        case Key::L:
            return "L";
        case Key::M:
            return "M";
        case Key::N:
            return "N";
        case Key::O:
            return "O";
        case Key::P:
            return "P";
        case Key::Q:
            return "Q";
        case Key::R:
            return "R";
        case Key::S:
            return "S";
        case Key::T:
            return "T";
        case Key::U:
            return "U";
        case Key::V:
            return "V";
        case Key::W:
            return "W";
        case Key::X:
            return "X";
        case Key::Y:
            return "Y";
        case Key::Z:
            return "Z";
        case Key::Minus:
            return "-";
        case Key::Equal:
            return "=";
        case Key::Space:
            return "Space";
        case Key::Backspace:
            return "Backspace";
        case Key::LeftBracket: 
            return "[";
        case Key::RightBracket:
            return "]";
        case Key::Backtick:
            return "`";
        case Key::Tab:
            return "Tab";
        case Key::Semicolon:
            return ";";
        case Key::Apostrophe:
            return "\'";
        case Key::Comma:
            return ",";
        case Key::Period:
            return ".";
        case Key::Slash:
            return "/";
        case Key::Backslash:
            return "\\";
        case Key::Escape:
            return "Esc";
        case Key::Enter:
            return "Enter";
        case Key::LeftShift:
            return "Left Shift";
        case Key::RightShift:
            return "Right Shift";
        case Key::LeftControl:
            return "Left Ctrl";
        case Key::RightControl:
            return "Right Ctrl";
        case Key::LeftAlt:
            return "Left Alt";
        case Key::RightAlt:
            return "Right Alt";
        case Key::LeftSuper:
            return "Left Super";
        case Key::RightSuper:
            return "Right Super";
        case Key::PrintScreen:
            return "Print Screen";
        case Key::Pause:
            return "Pause";
        case Key::Insert:
            return "Insert";
        case Key::Delete:
            return "Delete";
        case Key::Home:
            return "Home";
        case Key::End:
            return "End";
        case Key::PageUp:
            return "Page Up";
        case Key::PageDown:
            return "Page Down";
        case Key::ArrowUp:
            return "Arrow Up";
        case Key::ArrowDown:
            return "Arrow Down";
        case Key::ArrowLeft:
            return "Arrow Left";
        case Key::ArrowRight:
            return "Arrow Right";
        case Key::CapsLock:
            return "Caps Lock";
        case Key::ScrollLock:
            return "Scroll Lock";
        case Key::NumLock:
            return "Num Lock";
        case Key::NumpadZero:
            return "Numpad 0";
        case Key::NumpadOne:
            return "Numpad 1";
        case Key::NumpadTwo:
            return "Numpad 2";
        case Key::NumpadThree:
            return "Numpad 3";
        case Key::NumpadFour:
            return "Numpad 4";
        case Key::NumpadFive:
            return "Numpad 5";
        case Key::NumpadSix:
            return "Numpad 6";
        case Key::NumpadSeven:
            return "Numpad 7";
        case Key::NumpadEight:
            return "Numpad 8";
        case Key::NumpadNine:
            return "Numpad 9";
        case Key::NumpadDecimal:
            return "Numpad .";
        case Key::NumpadEqual:
            return "Numpad =";
        case Key::NumpadEnter:
            return "Numpad Enter";
        case Key::NumpadDivide:
            return "Numpad /";
        case Key::NumpadMultiply:
            return "Numpad *";
        case Key::NumpadSubtract:
            return "Numpad -";
        case Key::NumpadAdd:
            return "Numpad +";
        default:
            return "[Unknown Key]";
    }
}

Input::Key Input::GlfwMacroToKey(int key) {
    switch (key) {
        case GLFW_KEY_F1:
            return Key::F1;
        case GLFW_KEY_F2:
            return Key::F2;
        case GLFW_KEY_F3:
            return Key::F3;
        case GLFW_KEY_F4:
            return Key::F4;
        case GLFW_KEY_F5:
            return Key::F5;
        case GLFW_KEY_F6:
            return Key::F6;
        case GLFW_KEY_F7:
            return Key::F7;
        case GLFW_KEY_F8:
            return Key::F8;
        case GLFW_KEY_F9:
            return Key::F9;
        case GLFW_KEY_F10:
            return Key::F10;
        case GLFW_KEY_F11:
            return Key::F11;
        case GLFW_KEY_F12:
            return Key::F12;
        case GLFW_KEY_F13:
            return Key::F13;
        case GLFW_KEY_F14:
            return Key::F14;
        case GLFW_KEY_F15:
            return Key::F15;
        case GLFW_KEY_F16:
            return Key::F16;
        case GLFW_KEY_F17:
            return Key::F17;
        case GLFW_KEY_F18:
            return Key::F18;
        case GLFW_KEY_F19:
            return Key::F19;
        case GLFW_KEY_F20:
            return Key::F20;
        case GLFW_KEY_F21:
            return Key::F21;
        case GLFW_KEY_F22:
            return Key::F22;
        case GLFW_KEY_F23:
            return Key::F23;
        case GLFW_KEY_F24:
            return Key::F24;
        case GLFW_KEY_F25:
            return Key::F25;
        case GLFW_KEY_0:
            return Key::Zero;
        case GLFW_KEY_1:
            return Key::One;
        case GLFW_KEY_2:
            return Key::Two;
        case GLFW_KEY_3:
            return Key::Three;
        case GLFW_KEY_4:
            return Key::Four;
        case GLFW_KEY_5:
            return Key::Five;
        case GLFW_KEY_6:
            return Key::Six;
        case GLFW_KEY_7:
            return Key::Seven;
        case GLFW_KEY_8:
            return Key::Eight;
        case GLFW_KEY_9:
            return Key::Nine;
        case GLFW_KEY_A:
            return Key::A;
        case GLFW_KEY_B:
            return Key::B;
        case GLFW_KEY_C:
            return Key::C;
        case GLFW_KEY_D:
            return Key::D;
        case GLFW_KEY_E:
            return Key::E;
        case GLFW_KEY_F:
            return Key::F;
        case GLFW_KEY_G:
            return Key::G;
        case GLFW_KEY_H:
            return Key::H;
        case GLFW_KEY_I:
            return Key::I;
        case GLFW_KEY_J:
            return Key::J;
        case GLFW_KEY_K:
            return Key::K;
        case GLFW_KEY_L:
            return Key::L;
        case GLFW_KEY_M:
            return Key::M;
        case GLFW_KEY_N:
            return Key::N;
        case GLFW_KEY_O:
            return Key::O;
        case GLFW_KEY_P:
            return Key::P;
        case GLFW_KEY_Q:
            return Key::Q;
        case GLFW_KEY_R:
            return Key::R;
        case GLFW_KEY_S:
            return Key::S;
        case GLFW_KEY_T:
            return Key::T;
        case GLFW_KEY_U:
            return Key::U;
        case GLFW_KEY_V:
            return Key::V;
        case GLFW_KEY_W:
            return Key::W;
        case GLFW_KEY_X:
            return Key::X;
        case GLFW_KEY_Y:
            return Key::Y;
        case GLFW_KEY_Z:
            return Key::Z;
        case GLFW_KEY_MINUS:
            return Key::Minus;
        case GLFW_KEY_EQUAL:
            return Key::Equal;
        case GLFW_KEY_SPACE:
            return Key::Space;
        case GLFW_KEY_BACKSPACE:
            return Key::Backspace;
        case GLFW_KEY_LEFT_BRACKET:
            return Key::LeftBracket;
        case GLFW_KEY_RIGHT_BRACKET:
            return Key::RightBracket;
        case GLFW_KEY_GRAVE_ACCENT:
            return Key::Backtick;
        case GLFW_KEY_TAB:
            return Key::Tab;
        case GLFW_KEY_SEMICOLON:
            return Key::Semicolon;
        case GLFW_KEY_APOSTROPHE:
            return Key::Apostrophe;
        case GLFW_KEY_COMMA:
            return Key::Comma;
        case GLFW_KEY_PERIOD:
            return Key::Period;
        case GLFW_KEY_SLASH:
            return Key::Slash;
        case GLFW_KEY_BACKSLASH:
            return Key::Backslash;
        case GLFW_KEY_ESCAPE:
            return Key::Escape;
        case GLFW_KEY_ENTER:
            return Key::Enter;
        case GLFW_KEY_LEFT_SHIFT:
            return Key::LeftShift;
        case GLFW_KEY_RIGHT_SHIFT:
            return Key::RightShift;
        case GLFW_KEY_LEFT_CONTROL:
            return Key::LeftControl;
        case GLFW_KEY_RIGHT_CONTROL:
            return Key::RightControl;
        case GLFW_KEY_LEFT_ALT:
            return Key::LeftAlt;
        case GLFW_KEY_RIGHT_ALT:
            return Key::RightAlt;
        case GLFW_KEY_LEFT_SUPER:
            return Key::LeftSuper;
        case GLFW_KEY_RIGHT_SUPER:
            return Key::RightSuper;
        case GLFW_KEY_PRINT_SCREEN:
            return Key::PrintScreen;
        case GLFW_KEY_PAUSE:
            return Key::Pause;
        case GLFW_KEY_INSERT:
            return Key::Insert;
        case GLFW_KEY_DELETE:
            return Key::Delete;
        case GLFW_KEY_HOME:
            return Key::Home;
        case GLFW_KEY_END:
            return Key::End;
        case GLFW_KEY_PAGE_UP:
            return Key::PageUp;
        case GLFW_KEY_PAGE_DOWN:
            return Key::PageDown;
        case GLFW_KEY_UP:
            return Key::ArrowUp;
        case GLFW_KEY_DOWN:
            return Key::ArrowDown;
        case GLFW_KEY_LEFT:
            return Key::ArrowLeft;
        case GLFW_KEY_RIGHT:
            return Key::ArrowRight;
        case GLFW_KEY_CAPS_LOCK:
            return Key::CapsLock;
        case GLFW_KEY_SCROLL_LOCK:
            return Key::ScrollLock;
        case GLFW_KEY_NUM_LOCK:
            return Key::NumLock;
        case GLFW_KEY_KP_0:
            return Key::NumpadZero;
        case GLFW_KEY_KP_1:
            return Key::NumpadOne;
        case GLFW_KEY_KP_2:
            return Key::NumpadTwo;
        case GLFW_KEY_KP_3:
            return Key::NumpadThree;
        case GLFW_KEY_KP_4:
            return Key::NumpadFour;
        case GLFW_KEY_KP_5:
            return Key::NumpadFive;
        case GLFW_KEY_KP_6:
            return Key::NumpadSix;
        case GLFW_KEY_KP_7:
            return Key::NumpadSeven;
        case GLFW_KEY_KP_8:
            return Key::NumpadEight;
        case GLFW_KEY_KP_9:
            return Key::NumpadNine;
        case GLFW_KEY_KP_DECIMAL:
            return Key::NumpadDecimal;
        case GLFW_KEY_KP_EQUAL:
            return Key::NumpadEqual;
        case GLFW_KEY_KP_ENTER:
            return Key::NumpadEnter;
        case GLFW_KEY_KP_DIVIDE:
            return Key::NumpadDivide;
        case GLFW_KEY_KP_MULTIPLY:
            return Key::NumpadMultiply;
        case GLFW_KEY_KP_SUBTRACT:
            return Key::NumpadSubtract;
        case GLFW_KEY_KP_ADD:
            return Key::NumpadAdd;
        default:
            return Key::None;
    }
}

int Input::KeyToGlfwMacro(Key key) {
    switch (key) {
        case Key::F1:
            return GLFW_KEY_F1;
        case Key::F2:
            return GLFW_KEY_F2;
        case Key::F3:
            return GLFW_KEY_F3;
        case Key::F4:
            return GLFW_KEY_F4;
        case Key::F5:
            return GLFW_KEY_F5;
        case Key::F6:
            return GLFW_KEY_F6;
        case Key::F7:
            return GLFW_KEY_F7;
        case Key::F8:
            return GLFW_KEY_F8;
        case Key::F9:
            return GLFW_KEY_F9;
        case Key::F10:
            return GLFW_KEY_F10;
        case Key::F11:
            return GLFW_KEY_F11;
        case Key::F12:
            return GLFW_KEY_F12;
        case Key::F13:
            return GLFW_KEY_F13;
        case Key::F14:
            return GLFW_KEY_F14;
        case Key::F15:
            return GLFW_KEY_F15;
        case Key::F16:
            return GLFW_KEY_F16;
        case Key::F17:
            return GLFW_KEY_F17;
        case Key::F18:
            return GLFW_KEY_F18;
        case Key::F19:
            return GLFW_KEY_F19;
        case Key::F20:
            return GLFW_KEY_F20;
        case Key::F21:
            return GLFW_KEY_F21;
        case Key::F22:
            return GLFW_KEY_F22;
        case Key::F23:
            return GLFW_KEY_F23;
        case Key::F24:
            return GLFW_KEY_F24;
        case Key::F25:
            return GLFW_KEY_F25;
        case Key::Zero:
            return GLFW_KEY_0;
        case Key::One:
            return GLFW_KEY_1;
        case Key::Two:
            return GLFW_KEY_2;
        case Key::Three:
            return GLFW_KEY_3;
        case Key::Four:
            return GLFW_KEY_4;
        case Key::Five:
            return GLFW_KEY_5;
        case Key::Six:
            return GLFW_KEY_6;
        case Key::Seven:
            return GLFW_KEY_7;
        case Key::Eight:
            return GLFW_KEY_8;
        case Key::Nine:
            return GLFW_KEY_9;
        case Key::A:
            return GLFW_KEY_A;
        case Key::B:
            return GLFW_KEY_B;
        case Key::C:
            return GLFW_KEY_C;
        case Key::D:
            return GLFW_KEY_D;
        case Key::E:
            return GLFW_KEY_E;
        case Key::F:
            return GLFW_KEY_F;
        case Key::G:
            return GLFW_KEY_G;
        case Key::H:
            return GLFW_KEY_H;
        case Key::I:
            return GLFW_KEY_I;
        case Key::J:
            return GLFW_KEY_J;
        case Key::K:
            return GLFW_KEY_K;
        case Key::L:
            return GLFW_KEY_L;
        case Key::M:
            return GLFW_KEY_M;
        case Key::N:
            return GLFW_KEY_N;
        case Key::O:
            return GLFW_KEY_O;
        case Key::P:
            return GLFW_KEY_P;
        case Key::Q:
            return GLFW_KEY_Q;
        case Key::R:
            return GLFW_KEY_R;
        case Key::S:
            return GLFW_KEY_S;
        case Key::T:
            return GLFW_KEY_T;
        case Key::U:
            return GLFW_KEY_U;
        case Key::V:
            return GLFW_KEY_V;
        case Key::W:
            return GLFW_KEY_W;
        case Key::X:
            return GLFW_KEY_X;
        case Key::Y:
            return GLFW_KEY_Y;
        case Key::Z:
            return GLFW_KEY_Z;
        case Key::Minus:
            return GLFW_KEY_MINUS;
        case Key::Equal:
            return GLFW_KEY_EQUAL;
        case Key::Space:
            return GLFW_KEY_SPACE;
        case Key::Backspace:
            return GLFW_KEY_BACKSPACE;
        case Key::LeftBracket: 
            return GLFW_KEY_LEFT_BRACKET;
        case Key::RightBracket:
            return GLFW_KEY_RIGHT_BRACKET;
        case Key::Backtick:
            return GLFW_KEY_GRAVE_ACCENT;
        case Key::Tab:
            return GLFW_KEY_TAB;
        case Key::Semicolon:
            return GLFW_KEY_SEMICOLON;
        case Key::Apostrophe:
            return GLFW_KEY_APOSTROPHE;
        case Key::Comma:
            return GLFW_KEY_COMMA;
        case Key::Period:
            return GLFW_KEY_PERIOD;
        case Key::Slash:
            return GLFW_KEY_SLASH;
        case Key::Backslash:
            return GLFW_KEY_BACKSLASH;
        case Key::Escape:
            return GLFW_KEY_ESCAPE;
        case Key::Enter:
            return GLFW_KEY_ENTER;
        case Key::LeftShift:
            return GLFW_KEY_LEFT_SHIFT;
        case Key::RightShift:
            return GLFW_KEY_RIGHT_SHIFT;
        case Key::LeftControl:
            return GLFW_KEY_LEFT_CONTROL;
        case Key::RightControl:
            return GLFW_KEY_RIGHT_CONTROL;
        case Key::LeftAlt:
            return GLFW_KEY_LEFT_ALT;
        case Key::RightAlt:
            return GLFW_KEY_RIGHT_ALT;
        case Key::LeftSuper:
            return GLFW_KEY_LEFT_SUPER;
        case Key::RightSuper:
            return GLFW_KEY_RIGHT_SUPER;
        case Key::PrintScreen:
            return GLFW_KEY_PRINT_SCREEN;
        case Key::Pause:
            return GLFW_KEY_PAUSE;
        case Key::Insert:
            return GLFW_KEY_INSERT;
        case Key::Delete:
            return GLFW_KEY_DELETE;
        case Key::Home:
            return GLFW_KEY_HOME;
        case Key::End:
            return GLFW_KEY_END;
        case Key::PageUp:
            return GLFW_KEY_PAGE_UP;
        case Key::PageDown:
            return GLFW_KEY_PAGE_DOWN;
        case Key::ArrowUp:
            return GLFW_KEY_UP;
        case Key::ArrowDown:
            return GLFW_KEY_DOWN;
        case Key::ArrowLeft:
            return GLFW_KEY_LEFT;
        case Key::ArrowRight:
            return GLFW_KEY_RIGHT;
        case Key::CapsLock:
            return GLFW_KEY_CAPS_LOCK;
        case Key::ScrollLock:
            return GLFW_KEY_SCROLL_LOCK;
        case Key::NumLock:
            return GLFW_KEY_NUM_LOCK;
        case Key::NumpadZero:
            return GLFW_KEY_KP_0;
        case Key::NumpadOne:
            return GLFW_KEY_KP_1;
        case Key::NumpadTwo:
            return GLFW_KEY_KP_2;
        case Key::NumpadThree:
            return GLFW_KEY_KP_3;
        case Key::NumpadFour:
            return GLFW_KEY_KP_4;
        case Key::NumpadFive:
            return GLFW_KEY_KP_5;
        case Key::NumpadSix:
            return GLFW_KEY_KP_6;
        case Key::NumpadSeven:
            return GLFW_KEY_KP_7;
        case Key::NumpadEight:
            return GLFW_KEY_KP_8;
        case Key::NumpadNine:
            return GLFW_KEY_KP_9;
        case Key::NumpadDecimal:
            return GLFW_KEY_KP_DECIMAL;
        case Key::NumpadEqual:
            return GLFW_KEY_KP_EQUAL;
        case Key::NumpadEnter:
            return GLFW_KEY_KP_ENTER;
        case Key::NumpadDivide:
            return GLFW_KEY_KP_DIVIDE;
        case Key::NumpadMultiply:
            return GLFW_KEY_KP_MULTIPLY;
        case Key::NumpadSubtract:
            return GLFW_KEY_KP_SUBTRACT;
        case Key::NumpadAdd:
            return GLFW_KEY_KP_ADD;
        default:
            return -1;
    }
}

} // namespace rf

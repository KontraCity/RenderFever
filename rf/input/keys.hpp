#pragma once

#include <array>
#include <type_traits>
#include <compare>

#include <rf/auxiliary/gl.hpp>

#include <rf/core/map_generators.hpp>

namespace rf {

namespace Input {
    enum class Key {
        None,

        // Keyboard
        Key_F1,
        Key_F2,
        Key_F3,
        Key_F4,
        Key_F5,
        Key_F6,
        Key_F7,
        Key_F8,
        Key_F9,
        Key_F10,
        Key_F11,
        Key_F12,
        Key_F13,
        Key_F14,
        Key_F15,
        Key_F16,
        Key_F17,
        Key_F18,
        Key_F19,
        Key_F20,
        Key_F21,
        Key_F22,
        Key_F23,
        Key_F24,
        Key_F25,
        Key_0,
        Key_1,
        Key_2,
        Key_3,
        Key_4,
        Key_5,
        Key_6,
        Key_7,
        Key_8,
        Key_9,
        Key_A,
        Key_B,
        Key_C,
        Key_D,
        Key_E,
        Key_F,
        Key_G,
        Key_H,
        Key_I,
        Key_J,
        Key_K,
        Key_L,
        Key_M,
        Key_N,
        Key_O,
        Key_P,
        Key_Q,
        Key_R,
        Key_S,
        Key_T,
        Key_U,
        Key_V,
        Key_W,
        Key_X,
        Key_Y,
        Key_Z,
        Key_Minus,
        Key_Equal,
        Key_Space,
        Key_Backspace,
        Key_LeftBracket,
        Key_RightBracket,
        Key_Backtick,
        Key_Tab,
        Key_Semicolon,
        Key_Apostrophe,
        Key_Comma,
        Key_Period,
        Key_Slash,
        Key_Backslash,
        Key_Escape,
        Key_Enter,
        Key_LeftShift,
        Key_RightShift,
        Key_LeftControl,
        Key_RightControl,
        Key_LeftAlt,
        Key_RightAlt,
        Key_LeftSuper,
        Key_RightSuper,
        Key_PrintScreen,
        Key_Pause,
        Key_Insert,
        Key_Delete,
        Key_Home,
        Key_End,
        Key_PageUp,
        Key_PageDown,
        Key_ArrowUp,
        Key_ArrowDown,
        Key_ArrowLeft,
        Key_ArrowRight,
        Key_CapsLock,
        Key_ScrollLock,
        Key_NumLock,
        Key_Numpad0,
        Key_Numpad1,
        Key_Numpad2,
        Key_Numpad3,
        Key_Numpad4,
        Key_Numpad5,
        Key_Numpad6,
        Key_Numpad7,
        Key_Numpad8,
        Key_Numpad9,
        Key_NumpadDecimal,
        Key_NumpadEqual,
        Key_NumpadEnter,
        Key_NumpadDivide,
        Key_NumpadMultiply,
        Key_NumpadSubtract,
        Key_NumpadAdd,

        // Mouse
        Mouse_Button1,    // Left mouse button
        Mouse_Button2,    // Right mouse button
        Mouse_Button3,    // Middle mouse button
        Mouse_Button4,
        Mouse_Button5,
        Mouse_Button6,
        Mouse_Button7,
        Mouse_Button8,
    };

    inline Key& operator++(Key& key) {
        using KeyInteger = std::underlying_type<Key>::type;
        auto integer = static_cast<KeyInteger>(key);
        return key = static_cast<Key>(integer + 1);
    }

    inline std::strong_ordering operator<=>(Key left, Key right) {
        using KeyInteger = std::underlying_type<Key>::type;
        auto leftInteger = static_cast<KeyInteger>(left);
        auto rightInteger = static_cast<KeyInteger>(right);
        return leftInteger <=> rightInteger;
    }

    struct KeyEntry {
        Key key;
        int macro;
        const char* name;
    };

    constexpr auto KeyRecords = std::to_array<KeyEntry>({
        { Key::None,                -1,                     "None"                  },
        { Key::Key_F1,              GLFW_KEY_F1,            "F1"                    },
        { Key::Key_F2,              GLFW_KEY_F2,            "F2"                    },
        { Key::Key_F3,              GLFW_KEY_F3,            "F3"                    },
        { Key::Key_F4,              GLFW_KEY_F4,            "F4"                    },
        { Key::Key_F5,              GLFW_KEY_F5,            "F5"                    },
        { Key::Key_F6,              GLFW_KEY_F6,            "F6"                    },
        { Key::Key_F7,              GLFW_KEY_F7,            "F7"                    },
        { Key::Key_F8,              GLFW_KEY_F8,            "F8"                    },
        { Key::Key_F9,              GLFW_KEY_F9,            "F9"                    },
        { Key::Key_F10,             GLFW_KEY_F10,           "F10"                   },
        { Key::Key_F11,             GLFW_KEY_F11,           "F11"                   },
        { Key::Key_F12,             GLFW_KEY_F12,           "F12"                   },
        { Key::Key_F13,             GLFW_KEY_F13,           "F13"                   },
        { Key::Key_F14,             GLFW_KEY_F14,           "F14"                   },
        { Key::Key_F15,             GLFW_KEY_F15,           "F15"                   },
        { Key::Key_F16,             GLFW_KEY_F16,           "F16"                   },
        { Key::Key_F17,             GLFW_KEY_F17,           "F17"                   },
        { Key::Key_F18,             GLFW_KEY_F18,           "F18"                   },
        { Key::Key_F19,             GLFW_KEY_F19,           "F19"                   },
        { Key::Key_F20,             GLFW_KEY_F20,           "F20"                   },
        { Key::Key_F21,             GLFW_KEY_F21,           "F21"                   },
        { Key::Key_F22,             GLFW_KEY_F22,           "F22"                   },
        { Key::Key_F23,             GLFW_KEY_F23,           "F23"                   },
        { Key::Key_F24,             GLFW_KEY_F24,           "F24"                   },
        { Key::Key_F25,             GLFW_KEY_F25,           "F25"                   },
        { Key::Key_0,               GLFW_KEY_0,             "0"                     },
        { Key::Key_1,               GLFW_KEY_1,             "1"                     },
        { Key::Key_2,               GLFW_KEY_2,             "2"                     },
        { Key::Key_3,               GLFW_KEY_3,             "3"                     },
        { Key::Key_4,               GLFW_KEY_4,             "4"                     },
        { Key::Key_5,               GLFW_KEY_5,             "5"                     },
        { Key::Key_6,               GLFW_KEY_6,             "6"                     },
        { Key::Key_7,               GLFW_KEY_7,             "7"                     },
        { Key::Key_8,               GLFW_KEY_8,             "8"                     },
        { Key::Key_9,               GLFW_KEY_9,             "9"                     },
        { Key::Key_A,               GLFW_KEY_A,             "A"                     },
        { Key::Key_B,               GLFW_KEY_B,             "B"                     },
        { Key::Key_C,               GLFW_KEY_C,             "C"                     },
        { Key::Key_D,               GLFW_KEY_D,             "D"                     },
        { Key::Key_E,               GLFW_KEY_E,             "E"                     },
        { Key::Key_F,               GLFW_KEY_F,             "F"                     },
        { Key::Key_G,               GLFW_KEY_G,             "G"                     },
        { Key::Key_H,               GLFW_KEY_H,             "H"                     },
        { Key::Key_I,               GLFW_KEY_I,             "I"                     },
        { Key::Key_J,               GLFW_KEY_J,             "J"                     },
        { Key::Key_K,               GLFW_KEY_K,             "K"                     },
        { Key::Key_L,               GLFW_KEY_L,             "L"                     },
        { Key::Key_M,               GLFW_KEY_M,             "M"                     },
        { Key::Key_N,               GLFW_KEY_N,             "N"                     },
        { Key::Key_O,               GLFW_KEY_O,             "O"                     },
        { Key::Key_P,               GLFW_KEY_P,             "P"                     },
        { Key::Key_Q,               GLFW_KEY_Q,             "Q"                     },
        { Key::Key_R,               GLFW_KEY_R,             "R"                     },
        { Key::Key_S,               GLFW_KEY_S,             "S"                     },
        { Key::Key_T,               GLFW_KEY_T,             "T"                     },
        { Key::Key_U,               GLFW_KEY_U,             "U"                     },
        { Key::Key_V,               GLFW_KEY_V,             "V"                     },
        { Key::Key_W,               GLFW_KEY_W,             "W"                     },
        { Key::Key_X,               GLFW_KEY_X,             "X"                     },
        { Key::Key_Y,               GLFW_KEY_Y,             "Y"                     },
        { Key::Key_Z,               GLFW_KEY_Z,             "Z"                     },
        { Key::Key_Minus,           GLFW_KEY_MINUS,         "-"                     },
        { Key::Key_Equal,           GLFW_KEY_EQUAL,         "="                     },
        { Key::Key_Space,           GLFW_KEY_SPACE,         "Space"                 },
        { Key::Key_Backspace,       GLFW_KEY_BACKSPACE,     "Backspace"             },
        { Key::Key_LeftBracket,     GLFW_KEY_LEFT_BRACKET,  "["                     },
        { Key::Key_RightBracket,    GLFW_KEY_RIGHT_BRACKET, "]"                     },
        { Key::Key_Backtick,        GLFW_KEY_GRAVE_ACCENT,  "`"                     },
        { Key::Key_Tab,             GLFW_KEY_TAB,           "Tab"                   },
        { Key::Key_Semicolon,       GLFW_KEY_SEMICOLON,     ";"                     },
        { Key::Key_Apostrophe,      GLFW_KEY_APOSTROPHE,    "'"                     },
        { Key::Key_Comma,           GLFW_KEY_COMMA,         ","                     },
        { Key::Key_Period,          GLFW_KEY_PERIOD,        "."                     },
        { Key::Key_Slash,           GLFW_KEY_SLASH,         "/"                     },
        { Key::Key_Backslash,       GLFW_KEY_BACKSLASH,     "\\"                    },
        { Key::Key_Escape,          GLFW_KEY_ESCAPE,        "Escape"                },
        { Key::Key_Enter,           GLFW_KEY_ENTER,         "Enter"                 },
        { Key::Key_LeftShift,       GLFW_KEY_LEFT_SHIFT,    "Left Shift"            },
        { Key::Key_RightShift,      GLFW_KEY_RIGHT_SHIFT,   "Right Shift"           },
        { Key::Key_LeftControl,     GLFW_KEY_LEFT_CONTROL,  "Left Ctrl"             },
        { Key::Key_RightControl,    GLFW_KEY_RIGHT_CONTROL, "Right Ctrl"            },
        { Key::Key_LeftAlt,         GLFW_KEY_LEFT_ALT,      "Left Alt"              },
        { Key::Key_RightAlt,        GLFW_KEY_RIGHT_ALT,     "Right Alt"             },
        { Key::Key_LeftSuper,       GLFW_KEY_LEFT_SUPER,    "Left Super"            },
        { Key::Key_RightSuper,      GLFW_KEY_RIGHT_SUPER,   "Right Super"           },
        { Key::Key_PrintScreen,     GLFW_KEY_PRINT_SCREEN,  "Print Screen"          },
        { Key::Key_Pause,           GLFW_KEY_PAUSE,         "Pause"                 },
        { Key::Key_Insert,          GLFW_KEY_INSERT,        "Insert"                },
        { Key::Key_Delete,          GLFW_KEY_DELETE,        "Delete"                },
        { Key::Key_Home,            GLFW_KEY_HOME,          "Home"                  },
        { Key::Key_End,             GLFW_KEY_END,           "End"                   },
        { Key::Key_PageUp,          GLFW_KEY_PAGE_UP,       "Page Up"               },
        { Key::Key_PageDown,        GLFW_KEY_PAGE_DOWN,     "Page Down"             },
        { Key::Key_ArrowUp,         GLFW_KEY_UP,            "Arrow Up"              },
        { Key::Key_ArrowDown,       GLFW_KEY_DOWN,          "Arrow Down"            },
        { Key::Key_ArrowLeft,       GLFW_KEY_LEFT,          "Arrow Left"            },
        { Key::Key_ArrowRight,      GLFW_KEY_RIGHT,         "Arrow Right"           },
        { Key::Key_CapsLock,        GLFW_KEY_CAPS_LOCK,     "Caps Lock"             },
        { Key::Key_ScrollLock,      GLFW_KEY_SCROLL_LOCK,   "Scroll Lock"           },
        { Key::Key_NumLock,         GLFW_KEY_NUM_LOCK,      "Num Lock"              },
        { Key::Key_Numpad0,         GLFW_KEY_KP_0,          "Numpad 0"              },
        { Key::Key_Numpad1,         GLFW_KEY_KP_1,          "Numpad 1"              },
        { Key::Key_Numpad2,         GLFW_KEY_KP_2,          "Numpad 2"              },
        { Key::Key_Numpad3,         GLFW_KEY_KP_3,          "Numpad 3"              },
        { Key::Key_Numpad4,         GLFW_KEY_KP_4,          "Numpad 4"              },
        { Key::Key_Numpad5,         GLFW_KEY_KP_5,          "Numpad 5"              },
        { Key::Key_Numpad6,         GLFW_KEY_KP_6,          "Numpad 6"              },
        { Key::Key_Numpad7,         GLFW_KEY_KP_7,          "Numpad 7"              },
        { Key::Key_Numpad8,         GLFW_KEY_KP_8,          "Numpad 8"              },
        { Key::Key_Numpad9,         GLFW_KEY_KP_9,          "Numpad 9"              },
        { Key::Key_NumpadDecimal,   GLFW_KEY_KP_DECIMAL,    "Numpad ."              },
        { Key::Key_NumpadEqual,     GLFW_KEY_KP_EQUAL,      "Numpad ="              },
        { Key::Key_NumpadEnter,     GLFW_KEY_KP_ENTER,      "Numpad Enter"          },
        { Key::Key_NumpadDivide,    GLFW_KEY_KP_DIVIDE,     "Numpad /"              },
        { Key::Key_NumpadMultiply,  GLFW_KEY_KP_MULTIPLY,   "Numpad *"              },
        { Key::Key_NumpadSubtract,  GLFW_KEY_KP_SUBTRACT,   "Numpad -"              },
        { Key::Key_NumpadAdd,       GLFW_KEY_KP_ADD,        "Numpad +"              },
        { Key::Mouse_Button1,       GLFW_MOUSE_BUTTON_1,    "Mouse button 1 (LMB)"  },
        { Key::Mouse_Button2,       GLFW_MOUSE_BUTTON_2,    "Mouse button 2 (RMB)"  },
        { Key::Mouse_Button3,       GLFW_MOUSE_BUTTON_3,    "Mouse button 3 (MMB)"  },
        { Key::Mouse_Button4,       GLFW_MOUSE_BUTTON_4,    "Mouse button 4"        },
        { Key::Mouse_Button5,       GLFW_MOUSE_BUTTON_5,    "Mouse button 5"        },
        { Key::Mouse_Button6,       GLFW_MOUSE_BUTTON_6,    "Mouse button 6"        },
        { Key::Mouse_Button7,       GLFW_MOUSE_BUTTON_7,    "Mouse button 7"        },
        { Key::Mouse_Button8,       GLFW_MOUSE_BUTTON_8,    "Mouse button 8"        },
    });

    inline KeyEntry GetKeyEntry(Key key) {
        constexpr auto extractor = [](KeyEntry entry) { return entry.key; };
        return GenerateValueToEntryMap<KeyRecords, Key, KeyEntry>(extractor).at(key);
    }

    inline KeyEntry GetKeyEntry(int macro) {
        constexpr auto extractor = [](KeyEntry entry) { return entry.macro; };
        return GenerateValueToEntryMap<KeyRecords, int, KeyEntry>(extractor).at(macro);
    }
}

} // namespace rf
